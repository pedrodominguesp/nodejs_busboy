"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var rxjs_1 = require("rxjs");
var RxHttp = /** @class */ (function () {
    function RxHttp(options) {
        if (options === void 0) { options = {}; }
        this.options = options;
        this.http = axios_1.default.create(options);
    }
    RxHttp.prototype.createRequest = function (method, url, queryParams, body) {
        var request;
        switch (method) {
            case 'GET':
                request = this.http.get(url, { params: queryParams });
                break;
            case 'HEAD':
                request = this.http.head(url, { params: queryParams });
                break;
            case 'POST':
                request = this.http.post(url, body, { params: queryParams });
                break;
            case 'PUT':
                request = this.http.put(url, body, { params: queryParams });
                break;
            case 'PATCH':
                request = this.http.patch(url, body, { params: queryParams });
                break;
            case 'DELETE':
                request = this.http.delete(url, { params: queryParams });
                break;
            default:
                throw new Error('Method not supported');
        }
        return new rxjs_1.Observable(function (subscriber) {
            request.then(function (response) {
                subscriber.next(response.data);
                subscriber.complete();
            }).catch(function (err) {
                subscriber.error(err);
                subscriber.complete();
            });
        });
    };
    RxHttp.prototype.get = function (url, queryParams) {
        return this.createRequest('GET', url, queryParams);
    };
    RxHttp.prototype.head = function (url, queryParams) {
        return this.createRequest('HEAD', url, queryParams);
    };
    RxHttp.prototype.post = function (url, body, queryParams) {
        return this.createRequest('POST', url, queryParams, body);
    };
    RxHttp.prototype.put = function (url, body, queryParams) {
        return this.createRequest('PUT', url, queryParams, body);
    };
    RxHttp.prototype.patch = function (url, body, queryParams) {
        return this.createRequest('PATCH', url, queryParams, body);
    };
    RxHttp.prototype.delete = function (url, queryParams) {
        return this.createRequest('DELETE', url, queryParams);
    };
    return RxHttp;
}());
exports.RxHttp = RxHttp;
//# sourceMappingURL=rx-http.js.map