"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rx_http_1 = require("./rx-http");
var RxHttpObservable = /** @class */ (function () {
    function RxHttpObservable() {
        this.http = new rx_http_1.RxHttp({ headers: {} });
    }
    RxHttpObservable.prototype.delete = function (url, queryParams, headers) {
        if (url === void 0) { url = ''; }
        this.http = this.createHeaderRequest(headers);
        return this.http.delete(url, queryParams);
    };
    RxHttpObservable.prototype.get = function (url, queryParams, headers) {
        if (url === void 0) { url = ''; }
        this.http = this.createHeaderRequest(headers);
        return this.http.get(url, queryParams);
    };
    RxHttpObservable.prototype.head = function (url, queryParams) {
        if (url === void 0) { url = ''; }
        return this.http.head(url, queryParams);
    };
    RxHttpObservable.prototype.patch = function (url, body, queryParams, headers) {
        if (url === void 0) { url = ''; }
        this.http = this.createHeaderRequest(headers);
        return this.http.patch(url, body, queryParams);
    };
    RxHttpObservable.prototype.post = function (url, body, queryParams, headers) {
        if (url === void 0) { url = ''; }
        this.http = this.createHeaderRequest(headers);
        return this.http.post(url, body, queryParams);
    };
    RxHttpObservable.prototype.put = function (url, body, queryParams, headers) {
        if (url === void 0) { url = ''; }
        this.http = this.createHeaderRequest(headers);
        return this.http.put(url, body, queryParams);
    };
    RxHttpObservable.prototype.request = function (method, url, body, queryParams, headers) {
        if (method === void 0) { method = ''; }
        if (url === void 0) { url = ''; }
        var request;
        this.http = this.createHeaderRequest(headers);
        method = method.toUpperCase();
        switch (method) {
            case 'GET':
                request = this.get(url, { params: queryParams }, headers);
                break;
            case 'HEAD':
                request = this.head(url, { params: queryParams });
                break;
            case 'POST':
                request = this.post(url, body, { params: queryParams }, headers);
                break;
            case 'PUT':
                request = this.put(url, body, { params: queryParams }, headers);
                break;
            case 'PATCH':
                request = this.patch(url, body, { params: queryParams }, headers);
                break;
            case 'DELETE':
                request = this.delete(url, { params: queryParams }, headers);
                break;
            default:
                throw new Error('Http method not supported');
        }
        return request;
    };
    RxHttpObservable.prototype.createHeaderRequest = function (headers) {
        return headers ? new rx_http_1.RxHttp({ headers: headers }) : this.http;
    };
    return RxHttpObservable;
}());
exports.RxHttpObservable = RxHttpObservable;
//# sourceMappingURL=rx-http.observable.js.map